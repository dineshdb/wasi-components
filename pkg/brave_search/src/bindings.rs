// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
/// Search query parameters
#[derive(Clone)]
pub struct SearchParams {
    /// The search query string
    pub query: _rt::String,
    /// Number of results to return (default: 10, max: 20)
    pub limit: u32,
    /// Country code for results (e.g., "US", "GB", etc.)
    pub country: _rt::String,
    /// Language code for results (e.g., "en", "es", etc.)
    pub language: _rt::String,
    /// Safe search setting ("off", "moderate", "strict")
    pub safe_search: _rt::String,
    /// Whether to include text from web pages
    pub include_text: bool,
}
impl ::core::fmt::Debug for SearchParams {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("SearchParams")
            .field("query", &self.query)
            .field("limit", &self.limit)
            .field("country", &self.country)
            .field("language", &self.language)
            .field("safe-search", &self.safe_search)
            .field("include-text", &self.include_text)
            .finish()
    }
}
/// Individual search result
#[derive(Clone)]
pub struct SearchResult {
    /// The title of the search result
    pub title: _rt::String,
    /// The URL of the search result
    pub url: _rt::String,
    /// A snippet/description of the search result
    pub description: _rt::String,
    /// Text content from the page (if requested)
    pub text: Option<_rt::String>,
}
impl ::core::fmt::Debug for SearchResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("SearchResult")
            .field("title", &self.title)
            .field("url", &self.url)
            .field("description", &self.description)
            .field("text", &self.text)
            .finish()
    }
}
/// Search response containing results
#[derive(Clone)]
pub struct SearchResponse {
    /// List of search results
    pub results: _rt::Vec<SearchResult>,
    /// Total number of results available
    pub total_results: u32,
    /// Query that was executed
    pub query: _rt::String,
}
impl ::core::fmt::Debug for SearchResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("SearchResponse")
            .field("results", &self.results)
            .field("total-results", &self.total_results)
            .field("query", &self.query)
            .finish()
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_search_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: i32,
    arg3: *mut u8,
    arg4: usize,
    arg5: *mut u8,
    arg6: usize,
    arg7: *mut u8,
    arg8: usize,
    arg9: i32,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg4;
    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
    let len2 = arg6;
    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
    let len3 = arg8;
    let bytes3 = _rt::Vec::from_raw_parts(arg7.cast(), len3, len3);
    let result4 = T::search(SearchParams {
        query: _rt::string_lift(bytes0),
        limit: arg2 as u32,
        country: _rt::string_lift(bytes1),
        language: _rt::string_lift(bytes2),
        safe_search: _rt::string_lift(bytes3),
        include_text: _rt::bool_lift(arg9 as u8),
    });
    let ptr5 = (&raw mut _RET_AREA.0).cast::<u8>();
    match result4 {
        Ok(e) => {
            *ptr5.add(0).cast::<u8>() = (0i32) as u8;
            let SearchResponse {
                results: results6,
                total_results: total_results6,
                query: query6,
            } = e;
            let vec12 = results6;
            let len12 = vec12.len();
            let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                vec12.len() * (9 * ::core::mem::size_of::<*const u8>()),
                ::core::mem::size_of::<*const u8>(),
            );
            let result12 = if layout12.size() != 0 {
                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                if ptr.is_null() {
                    _rt::alloc::handle_alloc_error(layout12);
                }
                ptr
            } else {
                ::core::ptr::null_mut()
            };
            for (i, e) in vec12.into_iter().enumerate() {
                let base = result12.add(i * (9 * ::core::mem::size_of::<*const u8>()));
                {
                    let SearchResult {
                        title: title7,
                        url: url7,
                        description: description7,
                        text: text7,
                    } = e;
                    let vec8 = (title7.into_bytes()).into_boxed_slice();
                    let ptr8 = vec8.as_ptr().cast::<u8>();
                    let len8 = vec8.len();
                    ::core::mem::forget(vec8);
                    *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len8;
                    *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                    let vec9 = (url7.into_bytes()).into_boxed_slice();
                    let ptr9 = vec9.as_ptr().cast::<u8>();
                    let len9 = vec9.len();
                    ::core::mem::forget(vec9);
                    *base
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len9;
                    *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr9.cast_mut();
                    let vec10 = (description7.into_bytes()).into_boxed_slice();
                    let ptr10 = vec10.as_ptr().cast::<u8>();
                    let len10 = vec10.len();
                    ::core::mem::forget(vec10);
                    *base
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len10;
                    *base
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr10.cast_mut();
                    match text7 {
                        Some(e) => {
                            *base
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec11 = (e.into_bytes()).into_boxed_slice();
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            ::core::mem::forget(vec11);
                            *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len11;
                            *base
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr11.cast_mut();
                        }
                        None => {
                            *base
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                }
            }
            *ptr5
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len12;
            *ptr5
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = result12;
            *ptr5
                .add(3 * ::core::mem::size_of::<*const u8>())
                .cast::<i32>() = _rt::as_i32(total_results6);
            let vec13 = (query6.into_bytes()).into_boxed_slice();
            let ptr13 = vec13.as_ptr().cast::<u8>();
            let len13 = vec13.len();
            ::core::mem::forget(vec13);
            *ptr5
                .add(5 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len13;
            *ptr5
                .add(4 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = ptr13.cast_mut();
        }
        Err(e) => {
            *ptr5.add(0).cast::<u8>() = (1i32) as u8;
            let vec14 = (e.into_bytes()).into_boxed_slice();
            let ptr14 = vec14.as_ptr().cast::<u8>();
            let len14 = vec14.len();
            ::core::mem::forget(vec14);
            *ptr5
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len14;
            *ptr5
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = ptr14.cast_mut();
        }
    };
    ptr5
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_search<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => {
            let l1 = *arg0
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l2 = *arg0
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            let base12 = l1;
            let len12 = l2;
            for i in 0..len12 {
                let base = base12.add(i * (9 * ::core::mem::size_of::<*const u8>()));
                {
                    let l3 = *base.add(0).cast::<*mut u8>();
                    let l4 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l3, l4, 1);
                    let l5 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l6 = *base
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l5, l6, 1);
                    let l7 = *base
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *base
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l7, l8, 1);
                    let l9 = i32::from(
                        *base
                            .add(6 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    match l9 {
                        0 => {}
                        _ => {
                            let l10 = *base
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l11 = *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l10, l11, 1);
                        }
                    }
                }
            }
            _rt::cabi_dealloc(
                base12,
                len12 * (9 * ::core::mem::size_of::<*const u8>()),
                ::core::mem::size_of::<*const u8>(),
            );
            let l13 = *arg0
                .add(4 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l14 = *arg0
                .add(5 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            _rt::cabi_dealloc(l13, l14, 1);
        }
        _ => {
            let l15 = *arg0
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l16 = *arg0
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            _rt::cabi_dealloc(l15, l16, 1);
        }
    }
}
pub trait Guest {
    /// Perform a web search using Brave Search API
    fn search(params: SearchParams) -> Result<SearchResponse, _rt::String>;
}
#[doc(hidden)]
macro_rules! __export_world_brave_search_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "search")] unsafe extern "C" fn
        export_search(arg0 : * mut u8, arg1 : usize, arg2 : i32, arg3 : * mut u8, arg4 :
        usize, arg5 : * mut u8, arg6 : usize, arg7 : * mut u8, arg8 : usize, arg9 : i32,)
        -> * mut u8 { unsafe { $($path_to_types)*:: _export_search_cabi::<$ty > (arg0,
        arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) } } #[unsafe (export_name =
        "cabi_post_search")] unsafe extern "C" fn _post_return_search(arg0 : * mut u8,) {
        unsafe { $($path_to_types)*:: __post_return_search::<$ty > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_brave_search_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 6 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea =
    _RetArea([::core::mem::MaybeUninit::uninit(); 6 * ::core::mem::size_of::<*const u8>()]);
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_brave_search_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_brave_search_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_brave_search_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:component:brave-search:brave-search:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 403] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x90\x02\x01A\x02\x01\
A\x0b\x01r\x06\x05querys\x05limity\x07countrys\x08languages\x0bsafe-searchs\x0ci\
nclude-text\x7f\x03\0\x0dsearch-params\x03\0\0\x01ks\x01r\x04\x05titles\x03urls\x0b\
descriptions\x04text\x02\x03\0\x0dsearch-result\x03\0\x03\x01p\x04\x01r\x03\x07r\
esults\x05\x0dtotal-resultsy\x05querys\x03\0\x0fsearch-response\x03\0\x06\x01j\x01\
\x07\x01s\x01@\x01\x06params\x01\0\x08\x04\0\x06search\x01\x09\x04\0#component:b\
rave-search/brave-search\x04\0\x0b\x12\x01\0\x0cbrave-search\x03\0\0\0G\x09produ\
cers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x06\
0.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
