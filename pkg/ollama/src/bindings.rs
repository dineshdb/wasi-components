// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
/// A search result containing title, URL, and content
#[derive(Clone)]
pub struct SearchResult {
    pub title: _rt::String,
    pub url: _rt::String,
    pub content: _rt::String,
}
impl ::core::fmt::Debug for SearchResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("SearchResult")
            .field("title", &self.title)
            .field("url", &self.url)
            .field("content", &self.content)
            .finish()
    }
}
/// A fetch result containing title, content, and links
#[derive(Clone)]
pub struct FetchResult {
    pub title: _rt::String,
    pub content: _rt::String,
    pub links: _rt::Vec<_rt::String>,
}
impl ::core::fmt::Debug for FetchResult {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("FetchResult")
            .field("title", &self.title)
            .field("content", &self.content)
            .field("links", &self.links)
            .finish()
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_search_cabi<T: Guest>(arg0: *mut u8, arg1: usize, arg2: i32) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::search(_rt::string_lift(bytes0), arg2 as u32);
    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
    match result1 {
        Ok(e) => {
            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
            let vec7 = e;
            let len7 = vec7.len();
            let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                vec7.len() * (6 * ::core::mem::size_of::<*const u8>()),
                ::core::mem::size_of::<*const u8>(),
            );
            let result7 = if layout7.size() != 0 {
                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                if ptr.is_null() {
                    _rt::alloc::handle_alloc_error(layout7);
                }
                ptr
            } else {
                ::core::ptr::null_mut()
            };
            for (i, e) in vec7.into_iter().enumerate() {
                let base = result7.add(i * (6 * ::core::mem::size_of::<*const u8>()));
                {
                    let SearchResult {
                        title: title3,
                        url: url3,
                        content: content3,
                    } = e;
                    let vec4 = (title3.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len4;
                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                    let vec5 = (url3.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    ::core::mem::forget(vec5);
                    *base
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len5;
                    *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr5.cast_mut();
                    let vec6 = (content3.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    ::core::mem::forget(vec6);
                    *base
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len6;
                    *base
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr6.cast_mut();
                }
            }
            *ptr2
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len7;
            *ptr2
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = result7;
        }
        Err(e) => {
            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
            let vec8 = (e.into_bytes()).into_boxed_slice();
            let ptr8 = vec8.as_ptr().cast::<u8>();
            let len8 = vec8.len();
            ::core::mem::forget(vec8);
            *ptr2
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len8;
            *ptr2
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = ptr8.cast_mut();
        }
    };
    ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_search<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => {
            let l1 = *arg0
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l2 = *arg0
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            let base9 = l1;
            let len9 = l2;
            for i in 0..len9 {
                let base = base9.add(i * (6 * ::core::mem::size_of::<*const u8>()));
                {
                    let l3 = *base.add(0).cast::<*mut u8>();
                    let l4 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l3, l4, 1);
                    let l5 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l6 = *base
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l5, l6, 1);
                    let l7 = *base
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *base
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l7, l8, 1);
                }
            }
            _rt::cabi_dealloc(
                base9,
                len9 * (6 * ::core::mem::size_of::<*const u8>()),
                ::core::mem::size_of::<*const u8>(),
            );
        }
        _ => {
            let l10 = *arg0
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l11 = *arg0
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            _rt::cabi_dealloc(l10, l11, 1);
        }
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_fetch_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::fetch(_rt::string_lift(bytes0));
    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
    match result1 {
        Ok(e) => {
            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
            let FetchResult {
                title: title3,
                content: content3,
                links: links3,
            } = e;
            let vec4 = (title3.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr().cast::<u8>();
            let len4 = vec4.len();
            ::core::mem::forget(vec4);
            *ptr2
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len4;
            *ptr2
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = ptr4.cast_mut();
            let vec5 = (content3.into_bytes()).into_boxed_slice();
            let ptr5 = vec5.as_ptr().cast::<u8>();
            let len5 = vec5.len();
            ::core::mem::forget(vec5);
            *ptr2
                .add(4 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len5;
            *ptr2
                .add(3 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = ptr5.cast_mut();
            let vec7 = links3;
            let len7 = vec7.len();
            let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                vec7.len() * (2 * ::core::mem::size_of::<*const u8>()),
                ::core::mem::size_of::<*const u8>(),
            );
            let result7 = if layout7.size() != 0 {
                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                if ptr.is_null() {
                    _rt::alloc::handle_alloc_error(layout7);
                }
                ptr
            } else {
                ::core::ptr::null_mut()
            };
            for (i, e) in vec7.into_iter().enumerate() {
                let base = result7.add(i * (2 * ::core::mem::size_of::<*const u8>()));
                {
                    let vec6 = (e.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    ::core::mem::forget(vec6);
                    *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len6;
                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                }
            }
            *ptr2
                .add(6 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len7;
            *ptr2
                .add(5 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = result7;
        }
        Err(e) => {
            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
            let vec8 = (e.into_bytes()).into_boxed_slice();
            let ptr8 = vec8.as_ptr().cast::<u8>();
            let len8 = vec8.len();
            ::core::mem::forget(vec8);
            *ptr2
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len8;
            *ptr2
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = ptr8.cast_mut();
        }
    };
    ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_fetch<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => {
            let l1 = *arg0
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l2 = *arg0
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            _rt::cabi_dealloc(l1, l2, 1);
            let l3 = *arg0
                .add(3 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l4 = *arg0
                .add(4 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            _rt::cabi_dealloc(l3, l4, 1);
            let l5 = *arg0
                .add(5 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l6 = *arg0
                .add(6 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            let base9 = l5;
            let len9 = l6;
            for i in 0..len9 {
                let base = base9.add(i * (2 * ::core::mem::size_of::<*const u8>()));
                {
                    let l7 = *base.add(0).cast::<*mut u8>();
                    let l8 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l7, l8, 1);
                }
            }
            _rt::cabi_dealloc(
                base9,
                len9 * (2 * ::core::mem::size_of::<*const u8>()),
                ::core::mem::size_of::<*const u8>(),
            );
        }
        _ => {
            let l10 = *arg0
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l11 = *arg0
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            _rt::cabi_dealloc(l10, l11, 1);
        }
    }
}
pub trait Guest {
    /// Search the web using Ollama's web search API
    fn search(query: _rt::String, max_results: u32) -> Result<_rt::Vec<SearchResult>, _rt::String>;
    /// Fetch content from a URL using Ollama's web fetch API
    fn fetch(url: _rt::String) -> Result<FetchResult, _rt::String>;
}
#[doc(hidden)]
macro_rules! __export_world_ollama_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "search")] unsafe extern "C" fn
        export_search(arg0 : * mut u8, arg1 : usize, arg2 : i32,) -> * mut u8 { unsafe {
        $($path_to_types)*:: _export_search_cabi::<$ty > (arg0, arg1, arg2) } } #[unsafe
        (export_name = "cabi_post_search")] unsafe extern "C" fn _post_return_search(arg0
        : * mut u8,) { unsafe { $($path_to_types)*:: __post_return_search::<$ty > (arg0)
        } } #[unsafe (export_name = "fetch")] unsafe extern "C" fn export_fetch(arg0 : *
        mut u8, arg1 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
        _export_fetch_cabi::<$ty > (arg0, arg1) } } #[unsafe (export_name =
        "cabi_post_fetch")] unsafe extern "C" fn _post_return_fetch(arg0 : * mut u8,) {
        unsafe { $($path_to_types)*:: __post_return_fetch::<$ty > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_ollama_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 7 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea =
    _RetArea([::core::mem::MaybeUninit::uninit(); 7 * ::core::mem::size_of::<*const u8>()]);
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_ollama_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_ollama_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_ollama_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:component:ollama:ollama:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 320] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc3\x01\x01A\x02\x01\
A\x0c\x01r\x03\x05titles\x03urls\x07contents\x03\0\x0dsearch-result\x03\0\0\x01p\
s\x01r\x03\x05titles\x07contents\x05links\x02\x03\0\x0cfetch-result\x03\0\x03\x01\
p\x01\x01j\x01\x05\x01s\x01@\x02\x05querys\x0bmax-resultsy\0\x06\x04\0\x06search\
\x01\x07\x01j\x01\x04\x01s\x01@\x01\x03urls\0\x08\x04\0\x05fetch\x01\x09\x04\0\x17\
component:ollama/ollama\x04\0\x0b\x0c\x01\0\x06ollama\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
