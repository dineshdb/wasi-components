// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
/// A header name-value pair
#[derive(Clone)]
pub struct Header {
    pub name: _rt::String,
    pub value: _rt::String,
}
impl ::core::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Header")
            .field("name", &self.name)
            .field("value", &self.value)
            .finish()
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_fetch_as_markdown_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let base7 = arg2;
    let len7 = arg3;
    let mut result7 = _rt::Vec::with_capacity(len7);
    for i in 0..len7 {
        let base = base7.add(i * (4 * ::core::mem::size_of::<*const u8>()));
        let e7 = {
            let l1 = *base.add(0).cast::<*mut u8>();
            let l2 = *base
                .add(::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            let len3 = l2;
            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
            let l4 = *base
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l5 = *base
                .add(3 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            let len6 = l5;
            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
            Header {
                name: _rt::string_lift(bytes3),
                value: _rt::string_lift(bytes6),
            }
        };
        result7.push(e7);
    }
    _rt::cabi_dealloc(
        base7,
        len7 * (4 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
    let result8 = T::fetch_as_markdown(_rt::string_lift(bytes0), result7);
    let ptr9 = (&raw mut _RET_AREA.0).cast::<u8>();
    match result8 {
        Ok(e) => {
            *ptr9.add(0).cast::<u8>() = (0i32) as u8;
            let vec10 = (e.into_bytes()).into_boxed_slice();
            let ptr10 = vec10.as_ptr().cast::<u8>();
            let len10 = vec10.len();
            ::core::mem::forget(vec10);
            *ptr9
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len10;
            *ptr9
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = ptr10.cast_mut();
        }
        Err(e) => {
            *ptr9.add(0).cast::<u8>() = (1i32) as u8;
            let vec11 = (e.into_bytes()).into_boxed_slice();
            let ptr11 = vec11.as_ptr().cast::<u8>();
            let len11 = vec11.len();
            ::core::mem::forget(vec11);
            *ptr9
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len11;
            *ptr9
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = ptr11.cast_mut();
        }
    };
    ptr9
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_fetch_as_markdown<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => {
            let l1 = *arg0
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l2 = *arg0
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            _rt::cabi_dealloc(l1, l2, 1);
        }
        _ => {
            let l3 = *arg0
                .add(::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l4 = *arg0
                .add(2 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            _rt::cabi_dealloc(l3, l4, 1);
        }
    }
}
pub trait Guest {
    /// Fetch a URL and convert the response to markdown
    fn fetch_as_markdown(
        url: _rt::String,
        headers: _rt::Vec<Header>,
    ) -> Result<_rt::String, _rt::String>;
}
#[doc(hidden)]
macro_rules! __export_world_fetch_markdown_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "fetch-as-markdown")] unsafe extern "C"
        fn export_fetch_as_markdown(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3
        : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
        _export_fetch_as_markdown_cabi::<$ty > (arg0, arg1, arg2, arg3) } } #[unsafe
        (export_name = "cabi_post_fetch-as-markdown")] unsafe extern "C" fn
        _post_return_fetch_as_markdown(arg0 : * mut u8,) { unsafe { $($path_to_types)*::
        __post_return_fetch_as_markdown::<$ty > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_fetch_markdown_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 3 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea =
    _RetArea([::core::mem::MaybeUninit::uninit(); 3 * ::core::mem::size_of::<*const u8>()]);
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_fetch_markdown_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_fetch_markdown_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_fetch_markdown_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:component:fetch-markdown:fetch-markdown:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 261] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x80\x01\x01A\x02\x01\
A\x06\x01r\x02\x04names\x05values\x03\0\x06header\x03\0\0\x01p\x01\x01j\x01s\x01\
s\x01@\x02\x03urls\x07headers\x02\0\x03\x04\0\x11fetch-as-markdown\x01\x04\x04\0\
'component:fetch-markdown/fetch-markdown\x04\0\x0b\x14\x01\0\x0efetch-markdown\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-\
bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
